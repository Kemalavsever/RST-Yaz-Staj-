# PDS_Dosya_Analizi

# -*- coding: utf-8 -*-
"""pds_file_decoding_v1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aaIgbC-TZKE_3m4MJmNjzM6touPOSQek

Psd uzantılı dosyayı ilk 100 baytını çekip 4 er 4 er gruplayarak sayıya dönüştürme
"""

import os
from pathlib import Path

# .pds dosyanızın yolu
pds_file_path = "221022_111836.pds" # Burayı kendi dosya yolunuzla değiştirin

try:
    # Dosyayı ikili kipte aç ve ilk 100 baytını oku
    with open(pds_file_path, 'rb') as f:
        first_100_bytes = f.read(100)

    print(f"'{pds_file_path}' dosyasının ilk 100 baytı okundu.")
    print(f"Okunan bayt sayısı: {len(first_100_bytes)}")

    # İlk 100 baytı listeleyelim (hexadecimal formatta)
    print("\nİlk 100 baytın listesi (pozisyon ve hexadecimal değer):")
    for i, byte in enumerate(first_100_bytes):
        print(f"  Bayt {i}: {byte:02x}") # :02x formatı baytı iki haneli hexadecimal olarak gösterir


except FileNotFoundError:
    print(f"Hata: '{pds_file_path}' dosyası bulunamadı. Lütfen dosya adını veya yolunu kontrol edin.")
except Exception as e:
    print(f"Dosyayı okurken bir hata oluştu: {e}")

# Önceki adımda okuduğumuz ilk 100 bayt (first_100_bytes değişkeni)
# Eğer bu hücreyi tek başına çalıştırıyorsanız, first_100_bytes değişkeninin tanımlı olduğundan emin olun
# Örneğin:
# import os
# from pathlib import Path
# pds_file_path = "221022_111836.pds" # Burayı kendi dosya yolunuzla değiştirin
# try:
#     with open(pds_file_path, 'rb') as f:
#         first_100_bytes = f.read(100)
# except Exception as e:
#     print(f"Dosyayı okurken bir hata oluştu: {e}")
#     first_100_bytes = b"" # Hata durumunda boş bayt dizisi ata

if 'first_100_bytes' in locals() and first_100_bytes:
    print("İlk 100 bayt 4'erli gruplar halinde:")

    group_size = 4
    for i in range(0, len(first_100_bytes), group_size):
        byte_group = first_100_bytes[i : i + group_size]
        # Grubun sonu 4 bayttan azsa, kalan baytları da göster
        if len(byte_group) < group_size and i + group_size > len(first_100_bytes):
             print(f"  Kalan baytlar (Pozisyon {i}): {byte_group.hex()}")
        else:
            print(f"  Grup (Pozisyon {i}): {byte_group.hex()}")

    if len(first_100_bytes) % group_size != 0:
        print(f"\nUyarı: Toplam bayt sayısı ({len(first_100_bytes)}), grup boyutunun ({group_size}) tam katı değil.")

else:
    print("İlk 100 bayt verisi bulunamadı. Lütfen ilk 100 baytı okuyan önceki hücreyi çalıştırın.")

import struct

# İlk 100 bayt verisini alın (önceki hücrelerden first_100_bytes değişkeni)
# Eğer bu hücreyi tek başına çalıştırıyorsanız, first_100_bytes değişkeninin tanımlı olduğundan emin olun.
# Örneğin:
# import os
# from pathlib import Path
# pds_file_path = "221022_111836.pds"
# try:
#     with open(pds_file_path, 'rb') as f:
#         first_100_bytes = f.read(100)
# except Exception as e:
#     print(f"Dosyayı okurken bir hata oluştu: {e}")
#     first_100_bytes = b""

if 'first_100_bytes' in locals() and first_100_bytes:
    print("İlk 100 baytın 4'erli gruplar halinde little-endian 32-bit tamsayıya çevrilmiş hali:")

    # struct.unpack için format belirleyici: '<i' -> little-endian (küçük), i -> 32-bit signed integer (tamsayı)
    # Alternatif olarak '<I' -> 32-bit unsigned integer (işaretsiz tamsayı) kullanabilirsiniz
    unpack_format = '<i'
    group_size = struct.calcsize(unpack_format) # 32-bit tamsayı 4 bayttır

    if len(first_100_bytes) % group_size != 0:
        print(f"Uyarı: Okunan bayt sayısı ({len(first_100_bytes)}), grup boyutunun ({group_size}) tam katı değil. Son baytlar işlenmeyebilir.")

    grouped_integers = [] # Çevrilen tamsayıları saklamak için liste
    for i in range(0, len(first_100_bytes) - len(first_100_bytes) % group_size, group_size):
        byte_group = first_100_bytes[i : i + group_size]
        try:
            # Bayt grubunu tamsayıya çevir (little-endian)
            number = struct.unpack(unpack_format, byte_group)[0]
            grouped_integers.append(number) # Listeye ekle
            # Pozisyonu, baytları (hex) ve tamsayıyı yazdır
            print(f"  Pozisyon {i}: Baytlar: {byte_group.hex()} -> Sayı: {number}")
        except struct.error as e:
            print(f"  Hata (Pozisyon {i}): Bayt grubunu tamsayıya çeviremedi ({byte_group.hex()}): {e}")

    print("\nÇevrilen tamsayılar listesi:")
    print(grouped_integers)

    print("\nLittle-endian'a göre sıralanmış bayt grupları (Zaten little-endian olarak çevrildiler, bu adım gösterim amaçlıdır):")
    for i in range(0, len(first_100_bytes) - len(first_100_bytes) % group_size, group_size):
        byte_group = first_100_bytes[i : i + group_size]
        # Bayt grubunu little-endian formatında göster (hex)
        print(f"  Pozisyon {i}: {byte_group.hex()}")


else:
    print("İlk 100 bayt verisi bulunamadı. Lütfen ilk 100 baytı okuyan önceki hücreyi çalıştırın.")

import struct

# Önceki adımda okuduğumuz ilk 100 bayt (first_100_bytes değişkeni)
# Eğer bu hücreyi tek başına çalıştırıyorsanız, first_100_bytes değişkeninin tanımlı olduğundan emin olun
# Örneğin:
# import os
# from pathlib import Path
# pds_file_path = "221022_111836.pds"
# try:
#     with open(pds_file_path, 'rb') as f:
#         first_100_bytes = f.read(100)
# except Exception as e:
#     print(f"Dosyayı okurken bir hata oluştu: {e}")
#     first_100_bytes = b""

if 'first_100_bytes' in locals() and first_100_bytes:
    print("İlk 100 baytın 4'erli gruplar halinde little-endian 32-bit tamsayıya çevrilmiş hali:")

    # struct.unpack için format belirleyici: '<i' -> little-endian (küçük), i -> 32-bit signed integer (tamsayı)
    # Alternatif olarak '<I' -> 32-bit unsigned integer (işaretsiz tamsayı) kullanabilirsiniz
    unpack_format = '<i'
    group_size = struct.calcsize(unpack_format) # 32-bit tamsayı 4 bayttır

    if len(first_100_bytes) % group_size != 0:
        print(f"Uyarı: Okunan bayt sayısı ({len(first_100_bytes)}), grup boyutunun ({group_size}) tam katı değil. Son baytlar işlenmeyebilir.")

    for i in range(0, len(first_100_bytes) - len(first_100_bytes) % group_size, group_size):
        byte_group = first_100_bytes[i : i + group_size]
        try:
            # Bayt grubunu tamsayıya çevir (little-endian)
            number = struct.unpack(unpack_format, byte_group)[0]
            # Pozisyonu, baytları (hex) ve tamsayıyı yazdır
            print(f"  Pozisyon {i}: Baytlar: {byte_group.hex()} -> Sayı: {number}")
        except struct.error as e:
            print(f"  Hata (Pozisyon {i}): Bayt grubunu tamsayıya çeviremedi ({byte_group.hex()}): {e}")

else:
    print("İlk 100 bayt verisi bulunamadı. Lütfen ilk 100 baytı okuyan önceki hücreyi çalıştırın.")

import struct

# Önceki adımda okuduğumuz ilk 100 bayt (first_100_bytes değişkeni)
# Eğer bu hücreyi tek başına çalıştırıyorsanız, first_100_bytes değişkeninin tanımlı olduğundan emin olun
# Örneğin:
# import os
# from pathlib import Path
# pds_file_path = "221022_111836.pds"
# try:
#     with open(pds_file_path, 'rb') as f:
#         first_100_bytes = f.read(100)
# except Exception as e:
#     print(f"Dosyayı okurken bir hata oluştu: {e}")
#     first_100_bytes = b""

if 'first_100_bytes' in locals() and first_100_bytes:
    print("İlk 100 baytın 2'şerli gruplar halinde little-endian 16-bit tamsayıya çevrilmiş hali:")

    # struct.unpack için format belirleyici: '<h' -> little-endian (küçük), h -> 16-bit signed integer (tamsayı)
    # Alternatif olarak '<H' -> 16-bit unsigned integer (işaretsiz tamsayı) kullanabilirsiniz
    unpack_format = '<h'
    group_size = struct.calcsize(unpack_format) # 16-bit tamsayı 2 bayttır

    if len(first_100_bytes) % group_size != 0:
        print(f"Uyarı: Okunan bayt sayısı ({len(first_100_bytes)}), grup boyutunun ({group_size}) tam katı değil. Son baytlar işlenmeyebilir.")

    for i in range(0, len(first_100_bytes) - len(first_100_bytes) % group_size, group_size):
        byte_group = first_100_bytes[i : i + group_size]
        try:
            # Bayt grubunu tamsayıya çevir (little-endian)
            number = struct.unpack(unpack_format, byte_group)[0]
            # Pozisyonu, baytları (hex) ve tamsayıyı yazdır
            print(f"  Pozisyon {i}: Baytlar: {byte_group.hex()} -> Sayı: {number}")
        except struct.error as e:
            print(f"  Hata (Pozisyon {i}): Bayt grubunu tamsayıya çeviremedi ({byte_group.hex()}): {e}")

else:
    print("İlk 100 bayt verisi bulunamadı. Lütfen ilk 100 baytı okuyan önceki hücreyi çalıştırın.")









import struct
from pathlib import Path

# .pds dosyanızın yolu
pds_file_path = "221022_111836.pds" # Burayı kendi dosya yolunuzla değiştirin

try:
    # Dosyayı ikili kipte aç ve ilk 100 baytını oku
    with open(pds_file_path, 'rb') as f:
        first_100_bytes = f.read(100)

    print(f"'{pds_file_path}' dosyasının ilk 100 baytı okundu.")
    print(f"Okunan bayt sayısı: {len(first_100_bytes)}")

    # Baytları 4'erli gruplara ayır ve tamsayıya çevir
    print("\nİlk 100 baytın 4'erli gruplar halinde little-endian tamsayıya çevrilmiş hali (pozisyon ve detaylı bayt bilgisi ile birlikte):")

    # struct.unpack için format belirleyici: '<i' -> little-endian (küçük), i -> 32-bit signed integer (tamsayı)
    # Alternatif olarak '<I' -> 32-bit unsigned integer (işaretsiz tamsayı) kullanabilirsiniz
    unpack_format = '<i'
    group_size = struct.calcsize(unpack_format) # Formatın bayt cinsinden boyutu (örn. '<i' için 4)

    if len(first_100_bytes) % group_size != 0:
        print(f"Uyarı: Okunan bayt sayısı ({len(first_100_bytes)}), grup boyutunun ({group_size}) tam katı değil. Son baytlar işlenmeyebilir.")

    # Döngüyü pozisyonu takip ederek yap
    for i in range(0, len(first_100_bytes) - len(first_100_bytes) % group_size, group_size):
        byte_group = first_100_bytes[i : i + group_size]

        # 4 baytlık grubun içindeki her baytı detaylı göster
        detailed_bytes_str = " ".join([f"[{j+1}:{byte_group[j]:02x}]" for j in range(len(byte_group))])

        try:
            # Bayt grubunu tamsayıya çevir (little-endian)
            number = struct.unpack(unpack_format, byte_group)[0]
            # Pozisyonu, detaylı baytları ve tamsayıyı yazdır
            print(f"  Pozisyon {i}: Baytlar: {detailed_bytes_str} -> Sayı: {number}")
        except struct.error as e:
            print(f"  Hata (Pozisyon {i}): Bayt grubunu tamsayıya çeviremedi ({byte_group.hex()}): {e}")
        except Exception as e:
             print(f"  Hata (Pozisyon {i}): Çıktı formatlama hatası: {e}")


except FileNotFoundError:
    print(f"Hata: '{pds_file_path}' dosyası bulunamadı. Lütfen dosya adını veya yolunu kontrol edin.")
except Exception as e:
    print(f"Dosyayı okurken veya işlerken bir hata oluştu: {e}")
